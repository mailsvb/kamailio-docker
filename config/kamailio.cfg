#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v5.2 - default configuration script
#     - web: https://www.kamailio.org
#     - git: https://github.com/kamailio/kamailio
#
# Direct your questions about this file to: <sr-users@lists.kamailio.org>
#
# Refer to the Core CookBook at https://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#

####### Defined Values #########

#!define MULTIDOMAIN 0

# - flags
#   FLT_ - per transaction (message) flags
#   FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=1
log_stderror=yes

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
# log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes */
children=4

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
auto_aliases=no

/* SET external IP */
#!substdef "/PUBLIC_IP/$env(PUBLIC_IP)/"

/* listen addresses */
listen=udp:0.0.0.0:5060 advertise PUBLIC_IP:5060
listen=tcp:0.0.0.0:5060 advertise PUBLIC_IP:5060
listen=tls:0.0.0.0:5061 advertise PUBLIC_IP:5061

# TCP connection settings
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes
tcp_keepalive=yes
# Number of keepalives sent before dropping the connection
tcp_keepcnt=3
# Time before starting to send keepalives, if the connection is idle
tcp_keepidle=30
# Time interval between keepalive probes, when the previous probe failed
tcp_keepintvl=15

# TLS connection settings
enable_tls=yes

####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

####### Modules Section ########

/* set paths to location of modules */
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "tls.so"
loadmodule "sctp.so"
loadmodule "rtpproxy.so"
loadmodule "uac.so"

modparam("uac","restore_mode","none")

# ----------------- setting module-specific parameters ---------------

# ----- corex params -----
modparam("corex", "nio_intercept", 1)
modparam("corex", "nio_msg_avp", "$avp(msg)")

# ----- tls params -----
modparam("tls", "tls_method", "TLSv1.2+")
modparam("tls", "certificate", "kamailio.pem")
modparam("tls", "private_key", "kamailio.pem")
modparam("tls", "server_name", "kamailio")
modparam("tls", "send_close_notify", 1)

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)
# Set reason text of the automatically sent 100 to an INVITE
modparam("tm", "auto_inv_100_reason", "Trying")

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)

# ----- registrar module -----
modparam("registrar", "min_expires", 60)
modparam("registrar", "max_expires", 600)

# ----- xlog params -----
modparam("xlog", "prefix", "")

# ----- rtpproxy -----
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:22222")

####### Routing Logic ########

event_route[network:msg] {
    if (is_incoming()) {
        xinfo("<<<<<<\n$mb\n");
        $avp(msg) = $mb;
    } else {
        xinfo(">>>>>>\n$mb\n");
        $avp(msg) = $mb;
    }
}

/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

    xnotice("$rm <$fu> to $ru via $RAi <<< $siz\n");

    # per request initial checks
    route(REQINIT);

    # handle NAT
    route(NATDETECT);

    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    # handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    # handle RTP going through kamailio
    route(FORCERTP);

    # handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    if (is_method("REGISTER") && $rd == $RAi) {
        if (!save("location", "0x01")) {
            sl_reply_error();
        }
        xnotice("location stored <$fu> $sut\n");
        exit;
    }

    if (!is_method("REGISTER") && $rU==$null) {
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # update $du to set the destination address for proxying
    # $du = "sip:" + $rd + ":" + $rp + ";transport=";
    route(SPECIALS);
    route(LOCATION);
    exit;
}

route[NATDETECT] {
    force_rport();
}

route[FORCERTP] {
    if (has_body("application/sdp")) {
        rtpproxy_manage("cow", "PUBLIC_IP");
    }
}

route[SPECIALS] {
    if (is_method("INVITE")) {
        #uac_replace_from("", "tel:$fU");
        #append_hf("Alert-Info: alert-emergency\r\n");
        return;
    }
}

route[LOCATION] {
    if ($rd == $RAi) {
        lookup("location");
        switch ($retcode) {
            case -1:
            case -3:
                sl_send_reply("404", "Not Found");
                exit;
            case -2:
                sl_send_reply("405", "Not Found");
                exit;
        };
    }
    route(RELAY);
    exit;
}

# Wrapper for relaying requests
route[RELAY] {

    # enable additional event routes for forwarded requests - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
    }
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
    }
    if (is_method("INVITE")) {
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Per SIP request initial checks
route[REQINIT] {
    if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
        # silent drop for scanners - uncomment next line if want to reply
        sl_send_reply("200", "OK");
        exit;
    }

    if (!mf_process_maxfwd_header("70") && $retcode==-1) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xinfo("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (!has_totag()) return;

    # sequential request withing a dialog should take the path determined by record-routing
    if (loose_route()) {
        if ( is_method("NOTIFY") ) {
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
            record_route();
        }
        route(RELAY);
        exit;
    }

    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            # no loose-route, but stateful ACK; must be an ACK after a 487 or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xinfo("new branch [$T_branch_idx] to $ru\n");
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    if(!sanity_check("17604", "6")) {
        xinfo("Malformed SIP response from $si:$sp\n");
        drop;
    }
    # handle RTP going through kamailio
    route(FORCERTP);
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
    if (t_is_canceled()) exit;
}
